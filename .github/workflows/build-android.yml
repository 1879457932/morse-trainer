name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史记录以支持版本号生成
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip' # 启用pip缓存以加速构建
        
    - name: Cache Buildozer global directory
      uses: actions/cache@v4
      with:
        path: ~/.buildozer
        key: ${{ runner.os }}-buildozer-global-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-global-
    
    - name: Cache Buildozer project directory
      uses: actions/cache@v4
      with:
        path: ./.buildozer
        key: ${{ runner.os }}-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-
    
    - name: Cache Android NDK
      uses: actions/cache@v4
      id: cache-ndk
      with:
        path: ~/.buildozer/android/platform/android-ndk-r25b
        key: ${{ runner.os }}-android-ndk-r25b
        
    - name: Download Android NDK manually
      if: steps.cache-ndk.outputs.cache-hit != 'true'
      run: |
        echo "使用脚本下载Android NDK以避免buildozer下载时的问题..."
        # 安装requests库以支持下载
        pip install requests
        # 使用我们的下载脚本
        python download_ndk.py --version 25b
        
        echo "Android NDK 已手动下载和安装"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install buildozer==1.5.0 Cython==0.29.33 virtualenv
        # 安装额外的构建工具
        sudo apt-get update
        sudo apt-get install -y \
          python3-pip \
          build-essential \
          git \
          python3 \
          python3-dev \
          libffi-dev \
          libssl-dev \
          ffmpeg \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev \
          libsdl2-ttf-dev \
          libportmidi-dev \
          libswscale-dev \
          libavformat-dev \
          libavcodec-dev \
          zlib1g-dev \
          libwebp-dev \
          libfreetype6-dev
    
    - name: Install OpenJDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'
    
    - name: Create heavy dependencies exclusion
      run: |
        # 排除重型依赖以避免构建超时
        mkdir -p .buildozer/android/platform/build-arm64-v8a_armeabi-v7a/build/python-installs/morsetrainer/arm64-v8a/
        mkdir -p .buildozer/android/platform/build-arm64-v8a_armeabi-v7a/build/python-installs/morsetrainer/armeabi-v7a/
        
    - name: Create necessary directories
      run: |
        # 确保图标目录存在
        mkdir -p data/images
    
    - name: Set execute permissions
      run: |
        # 设置下载脚本为可执行
        chmod +x download_ndk.py
    
    - name: Modify buildozer.spec for CI
      run: |
        # 修改buildozer.spec以使用我们手动下载的NDK
        sed -i 's/android.ndk = 25.1.8937393/android.ndk = 25b/g' buildozer.spec
        
        # 禁用NDK自动下载
        echo "android.skip_update = True" >> buildozer.spec
    
    - name: Build with Buildozer
      run: |
        # 确保图标和启动画面已创建
        echo "尝试创建图标和启动画面..."
        if python create_icons.py; then
          echo "图标创建成功或已经存在"
        else
          echo "警告：图标创建失败，但将继续使用现有图标"
        fi
        
        # 设置buildozer参数
        export BUILDOZER_BUILD_MODE=debug
        export BUILDOZER_VERBOSE=1
        # 确保使用正确的minapi值
        export ANDROIDMINAPI=24
        
        # 构建APK
        buildozer -v android debug
      
    - name: List generated files
      run: |
        echo "Generated APK files:"
        ls -la bin/
      
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: app-debug
        path: bin/*.apk
        
    - name: Upload Build Logs
      if: always()  # 即使失败也上传日志
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          .buildozer/logs/*.log
          buildozer.log 