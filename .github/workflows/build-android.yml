name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史记录以支持版本号生成
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip' # 启用pip缓存以加速构建
        
    - name: Cache Buildozer global directory
      uses: actions/cache@v4
      with:
        path: ~/.buildozer
        key: ${{ runner.os }}-buildozer-global-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-buildozer-global-
    
    - name: Cache Buildozer project directory
      uses: actions/cache@v4
      with:
        path: ./.buildozer
        key: ${{ runner.os }}-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          ${{ runner.os }}-
    
    - name: Cache Android NDK
      uses: actions/cache@v4
      id: cache-ndk
      with:
        path: ~/.buildozer/android/platform/android-ndk-r25b
        key: ${{ runner.os }}-android-ndk-r25b
        
    - name: Download Android NDK manually
      if: steps.cache-ndk.outputs.cache-hit != 'true'
      run: |
        echo "使用脚本下载Android NDK以避免buildozer下载时的问题..."
        # 安装requests库以支持下载
        pip install requests
        
        # 确保脚本有执行权限
        chmod +x download_ndk.py
        
        # 创建目标目录
        mkdir -p ~/.buildozer/android/platform
        
        # 直接从官方源下载NDK
        echo "直接从Google下载NDK..."
        cd ~/.buildozer/android/platform
        wget -q https://dl.google.com/android/repository/android-ndk-r25b-linux.zip
        unzip -q android-ndk-r25b-linux.zip
        rm android-ndk-r25b-linux.zip
        
        echo "Android NDK 已手动下载和安装"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        
        # 使用指定版本的buildozer和开发依赖
        pip install Cython==0.29.33 virtualenv
        
        # 使用稳定版buildozer，直接从PyPI安装
        pip install buildozer==1.5.0
        
        # 先安装python-for-android的依赖项
        pip install colorama appdirs sh jinja2 six
        
        # 注意：不直接安装python-for-android，让buildozer自己管理这个依赖
        
        # 安装额外的构建工具
        sudo apt-get update
        sudo apt-get install -y \
          python3-pip \
          build-essential \
          git \
          python3 \
          python3-dev \
          libffi-dev \
          libssl-dev \
          ffmpeg \
          libsdl2-dev \
          libsdl2-image-dev \
          libsdl2-mixer-dev \
          libsdl2-ttf-dev \
          libportmidi-dev \
          libswscale-dev \
          libavformat-dev \
          libavcodec-dev \
          zlib1g-dev \
          libwebp-dev \
          libfreetype6-dev \
          autoconf \
          automake \
          libtool \
          pkg-config \
          m4
    
    - name: Install OpenJDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'
    
    - name: Create heavy dependencies exclusion
      run: |
        # 排除重型依赖以避免构建超时
        mkdir -p .buildozer/android/platform/build-arm64-v8a_armeabi-v7a/build/python-installs/morsetrainer/arm64-v8a/
        mkdir -p .buildozer/android/platform/build-arm64-v8a_armeabi-v7a/build/python-installs/morsetrainer/armeabi-v7a/
        
    - name: Create necessary directories
      run: |
        # 确保图标目录存在
        mkdir -p data/images
    
    - name: Set execute permissions
      run: |
        # 设置下载脚本为可执行
        chmod +x download_ndk.py
    
    - name: Modify buildozer.spec for CI
      run: |
        # 修改buildozer.spec以使用我们手动下载的NDK
        sed -i 's/android.ndk = 25.1.8937393/android.ndk = 25b/g' buildozer.spec
        
        # 禁用NDK自动下载
        echo "android.skip_update = True" >> buildozer.spec
    
    - name: Prepare for build
      run: |
        # 创建钩子目录结构
        mkdir -p .buildozer/hooks
        
        # 创建一个包含LT_SYS_SYMBOL_USCORE定义的补丁文件
        echo "创建libffi修补文件..."
        mkdir -p .buildozer/patches
        cat > .buildozer/patches/libffi_fix.m4 << 'EOF'
        # Check for symbol versioning support.
        AC_DEFUN([LT_SYS_SYMBOL_USCORE],
        [AC_CACHE_CHECK([for _ prefix in compiled symbols],
          [lt_cv_sys_symbol_underscore],
          [lt_cv_sys_symbol_underscore=no
          cat > conftest.$ac_ext <<_LT_EOF
        void nm_test_func(){}
        int main(){nm_test_func();return 0;}
        _LT_EOF
          if AC_TRY_EVAL(ac_compile); then
            # Now try to grab the symbols.
            ac_nlist=conftest.nm
            if AC_TRY_EVAL(NM conftest.$ac_objext \| $lt_cv_sys_global_symbol_pipe \> $ac_nlist) && test -s "$ac_nlist"; then
              # See whether the symbols have a leading underscore.
              if grep '^. _nm_test_func' "$ac_nlist" >/dev/null; then
                lt_cv_sys_symbol_underscore=yes
              else
                if grep '^. nm_test_func ' "$ac_nlist" >/dev/null; then
                  lt_cv_sys_symbol_underscore=no
                fi
              fi
            fi
            rm -f conftest.$ac_objext "$ac_nlist"
          fi
          rm -f conftest.$ac_ext
        ])
        ])
        EOF
        
        echo "准备构建钩子..."
        cat > .buildozer/hooks/before.sh << 'EOF'
        #!/bin/bash
        set -x
        echo "执行钩子脚本..."
        # 这个脚本会在每个构建步骤之前运行
        
        # 检查是否在处理libffi
        if [[ -d ".buildozer/android/platform/build-arm64-v8a_armeabi-v7a/build/other_builds/libffi" ]]; then
          for arch in arm64-v8a armeabi-v7a; do
            LIBFFI_DIR=".buildozer/android/platform/build-arm64-v8a_armeabi-v7a/build/other_builds/libffi/${arch}__ndk_target_24/libffi"
            if [[ -d "$LIBFFI_DIR" ]]; then
              echo "修补 libffi 目录: $LIBFFI_DIR"
              # 如果m4目录存在，就添加我们的修补文件
              if [[ -d "$LIBFFI_DIR/m4" ]]; then
                cp ".buildozer/patches/libffi_fix.m4" "$LIBFFI_DIR/m4/"
                # 修复configure.ac文件中的问题
                cd "$LIBFFI_DIR"
                # 添加定义到configure.ac
                sed -i '/AC_INIT/a\
                # 添加缺失的宏定义\
                m4_define([LT_SYS_SYMBOL_USCORE], [])' configure.ac
                # 强制生成新的configure脚本
                autoreconf -vif
              fi
            fi
          done
        fi
        EOF
        
        chmod +x .buildozer/hooks/before.sh
    
    - name: Build with Buildozer
      run: |
        # 确保图标和启动画面已创建
        echo "尝试创建图标和启动画面..."
        if python create_icons.py; then
          echo "图标创建成功或已经存在"
        else
          echo "警告：图标创建失败，但将继续使用现有图标"
        fi
        
        # 设置buildozer参数
        export BUILDOZER_BUILD_MODE=debug
        export BUILDOZER_VERBOSE=2  # 提高日志级别
        # 确保使用正确的minapi值
        export ANDROIDMINAPI=24
        export ANDROIDAPI=31
        export PATH=$PATH:~/.local/bin
        
        # 完全清除可能存在的缓存
        echo "彻底清理旧的构建缓存..."
        rm -rf .buildozer/android/platform/build*
        mkdir -p .buildozer/android/platform
        
        # 确保NDK指向正确位置
        echo "确认NDK路径..."
        export ANDROIDNDK=~/.buildozer/android/platform/android-ndk-r25b
        
        # 准备预下载的libffi
        echo "预先准备libffi..."
        mkdir -p .buildozer/android/platform/build-arm64-v8a_armeabi-v7a/build/other_builds/libffi
        
        # 构建APK
        echo "开始构建APK..."
        buildozer -v android debug || true
        
        # 确保日志存在 
        mkdir -p .buildozer/logs
        touch buildozer.log
      
    - name: List generated files
      run: |
        echo "Generated APK files:"
        ls -la bin/ || true
        echo "Generated log files:"
        find .buildozer -name "*.log" || true
        find . -name "buildozer.log" || true
      
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: app-debug
        path: bin/*.apk
        
    - name: Upload Build Logs
      if: always()  # 即使失败也上传日志
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          .buildozer/**/*.log
          buildozer.log 
